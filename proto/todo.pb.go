// Code generated by protoc-gen-go. DO NOT EDIT.
// source: todo.proto

package todo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NoParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoParams) Reset()         { *m = NoParams{} }
func (m *NoParams) String() string { return proto.CompactTextString(m) }
func (*NoParams) ProtoMessage()    {}
func (*NoParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{0}
}

func (m *NoParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoParams.Unmarshal(m, b)
}
func (m *NoParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoParams.Marshal(b, m, deterministic)
}
func (m *NoParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoParams.Merge(m, src)
}
func (m *NoParams) XXX_Size() int {
	return xxx_messageInfo_NoParams.Size(m)
}
func (m *NoParams) XXX_DiscardUnknown() {
	xxx_messageInfo_NoParams.DiscardUnknown(m)
}

var xxx_messageInfo_NoParams proto.InternalMessageInfo

type String struct {
	Contents             string   `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{1}
}

func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (m *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(m, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

type SimpleReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleReply) Reset()         { *m = SimpleReply{} }
func (m *SimpleReply) String() string { return proto.CompactTextString(m) }
func (*SimpleReply) ProtoMessage()    {}
func (*SimpleReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{2}
}

func (m *SimpleReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleReply.Unmarshal(m, b)
}
func (m *SimpleReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleReply.Marshal(b, m, deterministic)
}
func (m *SimpleReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleReply.Merge(m, src)
}
func (m *SimpleReply) XXX_Size() int {
	return xxx_messageInfo_SimpleReply.Size(m)
}
func (m *SimpleReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleReply.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleReply proto.InternalMessageInfo

func (m *SimpleReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Item in list
type Item struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsDone               bool     `protobuf:"varint,2,opt,name=isDone,proto3" json:"isDone,omitempty"`
	Contents             string   `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{3}
}

func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Item) GetIsDone() bool {
	if m != nil {
		return m.IsDone
	}
	return false
}

func (m *Item) GetContents() string {
	if m != nil {
		return m.Contents
	}
	return ""
}

type List struct {
	Items                []*Item  `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *List) Reset()         { *m = List{} }
func (m *List) String() string { return proto.CompactTextString(m) }
func (*List) ProtoMessage()    {}
func (*List) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{4}
}

func (m *List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_List.Unmarshal(m, b)
}
func (m *List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_List.Marshal(b, m, deterministic)
}
func (m *List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_List.Merge(m, src)
}
func (m *List) XXX_Size() int {
	return xxx_messageInfo_List.Size(m)
}
func (m *List) XXX_DiscardUnknown() {
	xxx_messageInfo_List.DiscardUnknown(m)
}

var xxx_messageInfo_List proto.InternalMessageInfo

func (m *List) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

// The request message containing the user's name.
type IDRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IDRequest) Reset()         { *m = IDRequest{} }
func (m *IDRequest) String() string { return proto.CompactTextString(m) }
func (*IDRequest) ProtoMessage()    {}
func (*IDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{5}
}

func (m *IDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IDRequest.Unmarshal(m, b)
}
func (m *IDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IDRequest.Marshal(b, m, deterministic)
}
func (m *IDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDRequest.Merge(m, src)
}
func (m *IDRequest) XXX_Size() int {
	return xxx_messageInfo_IDRequest.Size(m)
}
func (m *IDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IDRequest proto.InternalMessageInfo

func (m *IDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*NoParams)(nil), "todo.NoParams")
	proto.RegisterType((*String)(nil), "todo.String")
	proto.RegisterType((*SimpleReply)(nil), "todo.SimpleReply")
	proto.RegisterType((*Item)(nil), "todo.Item")
	proto.RegisterType((*List)(nil), "todo.List")
	proto.RegisterType((*IDRequest)(nil), "todo.IDRequest")
}

func init() { proto.RegisterFile("todo.proto", fileDescriptor_0e4b95d0c4e09639) }

var fileDescriptor_0e4b95d0c4e09639 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0x6a, 0xea, 0x40,
	0x10, 0x86, 0x4d, 0xdc, 0x13, 0xe3, 0x78, 0x50, 0xce, 0x5e, 0x1c, 0x44, 0x6f, 0x64, 0x11, 0x4c,
	0x69, 0x09, 0xc5, 0xbe, 0x81, 0xb5, 0x50, 0x4b, 0x29, 0x21, 0x16, 0x7a, 0x9d, 0x9a, 0x21, 0x2e,
	0x6c, 0xb2, 0xe9, 0xee, 0x4a, 0xeb, 0x9b, 0xf5, 0xf1, 0xca, 0xc6, 0x58, 0xac, 0x54, 0xf0, 0x6e,
	0x66, 0xe7, 0xe7, 0xff, 0x66, 0x7f, 0x06, 0xc0, 0xc8, 0x54, 0x86, 0xa5, 0x92, 0x46, 0x52, 0x62,
	0x6b, 0x06, 0xe0, 0x3f, 0xc9, 0x28, 0x51, 0x49, 0xae, 0xd9, 0x18, 0xbc, 0xa5, 0x51, 0xbc, 0xc8,
	0xe8, 0x00, 0xfc, 0x95, 0x2c, 0x0c, 0x16, 0x46, 0xf7, 0x9d, 0x91, 0x13, 0xb4, 0xe3, 0xef, 0x9e,
	0x4d, 0xa0, 0xb3, 0xe4, 0x79, 0x29, 0x30, 0xc6, 0x52, 0x6c, 0x69, 0x1f, 0x5a, 0x39, 0x6a, 0x9d,
	0x64, 0x58, 0x2b, 0xf7, 0x2d, 0x7b, 0x00, 0xb2, 0x30, 0x98, 0xd3, 0x2e, 0xb8, 0x3c, 0xad, 0x87,
	0x2e, 0x4f, 0xe9, 0x7f, 0xf0, 0xb8, 0x9e, 0xcb, 0x02, 0xfb, 0xee, 0xc8, 0x09, 0xfc, 0xb8, 0xee,
	0x7e, 0x40, 0x9b, 0x47, 0xd0, 0x00, 0xc8, 0x23, 0xd7, 0x86, 0x8e, 0xe0, 0x0f, 0x37, 0x98, 0xdb,
	0xad, 0x9a, 0x41, 0x67, 0x0a, 0x61, 0xf5, 0x21, 0x8b, 0x89, 0x77, 0x03, 0x36, 0x84, 0xf6, 0x62,
	0x1e, 0xe3, 0xdb, 0x06, 0xb5, 0x39, 0x46, 0x4f, 0x3f, 0x5d, 0x20, 0xc2, 0xfa, 0x8c, 0x81, 0x2c,
	0xb7, 0xc5, 0x8a, 0x76, 0x77, 0x06, 0xfb, 0x08, 0x06, 0xb5, 0xa1, 0x65, 0xb1, 0x06, 0x0d, 0xc1,
	0x7b, 0x96, 0x59, 0x26, 0x90, 0xf6, 0x6a, 0xd0, 0xde, 0x79, 0xf0, 0x6f, 0xf7, 0x70, 0x90, 0x04,
	0x6b, 0xd0, 0x0b, 0x20, 0xd1, 0x46, 0xaf, 0xe9, 0xdf, 0x7a, 0x58, 0x85, 0xf9, 0xbb, 0xf4, 0x12,
	0x7c, 0x2b, 0xad, 0x02, 0x3a, 0xf8, 0xc5, 0x29, 0x71, 0x73, 0x8e, 0xe2, 0xcc, 0x25, 0xae, 0x80,
	0xdc, 0xa5, 0xdc, 0x9c, 0xa9, 0x9e, 0x40, 0xeb, 0x76, 0xa3, 0x14, 0x16, 0xe6, 0x54, 0x16, 0x76,
	0x2d, 0xd6, 0x98, 0x5d, 0xc3, 0x90, 0xcb, 0x30, 0x53, 0xe5, 0x2a, 0xc4, 0x8f, 0xc4, 0x5a, 0xe8,
	0x70, 0x8d, 0x42, 0xc8, 0x77, 0xa9, 0x44, 0x3a, 0xeb, 0xdd, 0xdb, 0xfa, 0xc5, 0xd6, 0x91, 0x3d,
	0xaf, 0xc8, 0x79, 0xf5, 0xaa, 0x3b, 0xbb, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x3e, 0xa4,
	0xe8, 0x75, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ListClient is the client API for List service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ListClient interface {
	Sync(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*List, error)
	Toggle(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	Push(ctx context.Context, in *String, opts ...grpc.CallOption) (*SimpleReply, error)
	PushItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*SimpleReply, error)
	Del(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	Edit(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*SimpleReply, error)
	Current(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*Item, error)
}

type listClient struct {
	cc *grpc.ClientConn
}

func NewListClient(cc *grpc.ClientConn) ListClient {
	return &listClient{cc}
}

func (c *listClient) Sync(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/todo.list/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Toggle(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := c.cc.Invoke(ctx, "/todo.list/Toggle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Push(ctx context.Context, in *String, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := c.cc.Invoke(ctx, "/todo.list/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) PushItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := c.cc.Invoke(ctx, "/todo.list/PushItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Del(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := c.cc.Invoke(ctx, "/todo.list/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Edit(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := c.cc.Invoke(ctx, "/todo.list/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listClient) Current(ctx context.Context, in *NoParams, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/todo.list/Current", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListServer is the server API for List service.
type ListServer interface {
	Sync(context.Context, *NoParams) (*List, error)
	Toggle(context.Context, *IDRequest) (*SimpleReply, error)
	Push(context.Context, *String) (*SimpleReply, error)
	PushItem(context.Context, *Item) (*SimpleReply, error)
	Del(context.Context, *IDRequest) (*SimpleReply, error)
	Edit(context.Context, *IDRequest) (*SimpleReply, error)
	Current(context.Context, *NoParams) (*Item, error)
}

// UnimplementedListServer can be embedded to have forward compatible implementations.
type UnimplementedListServer struct {
}

func (*UnimplementedListServer) Sync(ctx context.Context, req *NoParams) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedListServer) Toggle(ctx context.Context, req *IDRequest) (*SimpleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Toggle not implemented")
}
func (*UnimplementedListServer) Push(ctx context.Context, req *String) (*SimpleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedListServer) PushItem(ctx context.Context, req *Item) (*SimpleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushItem not implemented")
}
func (*UnimplementedListServer) Del(ctx context.Context, req *IDRequest) (*SimpleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedListServer) Edit(ctx context.Context, req *IDRequest) (*SimpleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (*UnimplementedListServer) Current(ctx context.Context, req *NoParams) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Current not implemented")
}

func RegisterListServer(s *grpc.Server, srv ListServer) {
	s.RegisterService(&_List_serviceDesc, srv)
}

func _List_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.list/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Sync(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Toggle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Toggle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.list/Toggle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Toggle(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.list/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Push(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_PushItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).PushItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.list/PushItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).PushItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.list/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Del(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.list/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Edit(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _List_Current_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServer).Current(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.list/Current",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServer).Current(ctx, req.(*NoParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _List_serviceDesc = grpc.ServiceDesc{
	ServiceName: "todo.list",
	HandlerType: (*ListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _List_Sync_Handler,
		},
		{
			MethodName: "Toggle",
			Handler:    _List_Toggle_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _List_Push_Handler,
		},
		{
			MethodName: "PushItem",
			Handler:    _List_PushItem_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _List_Del_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _List_Edit_Handler,
		},
		{
			MethodName: "Current",
			Handler:    _List_Current_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo.proto",
}
